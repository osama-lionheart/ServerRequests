@model IPRequestForm.ViewModels.RequestFormViewModel
@{
    var isView = Model.RequestFormView == IPRequestForm.ViewModels.RequestFormViews.View;
    var isUpdate = Model.RequestFormView == IPRequestForm.ViewModels.RequestFormViews.Update;
    var isCreate = Model.RequestFormView == IPRequestForm.ViewModels.RequestFormViews.Create;
}

<script>
    $(function () {
    
        $('input[name=ServerTypeId]').change(function () {
            var bladeId = @((int)IPRequestForm.ViewModels.ServerTypes.Blades);

            if ($(this).val() == bladeId) {
                $('.bladeOptions').show(200);
            } else {
                $('.bladeOptions').hide(200);
            }
        });

        var datePickerOptions = {
            format: 'd/m/Y',
            date: '5/5/2005',
            current: '5/5/2005',
            starts: 1,
            onBeforeShow: function () {
                var val = $(this).val();

                if (val) {
                    //var date = new Date(val);
                    $(this).DatePickerSetDate(val, true);
                } else {
                    $(this).DatePickerSetDate(new Date(), true);
                }
            },
            onChange: function (formatted, dates) {
                $(this).val(formatted);
                $(this).textchanged();
                //$(this).DatePickerHide();
            }
        };
        
        $('input[name=startDate], input[name=endDate]').each(function () {
            $(this).DatePicker(datePickerOptions);
        });

        function onTextChange() {
            var tr = $(this).parents('tr');
            
            if (tr.hasClass('new-port')) {
            
                tr.find('.opened').removeClass('opened');
                tr.find('.select-option-hover').removeClass('select-option-hover');

                var newRow = tr.clone();

                newRow.find('input[type=text]').val('').bind('textchange', onTextChange);

                newRow.find('input[name=startDate], input[name=endDate]').each(function () {
                    $(this).DatePicker(datePickerOptions);
                });

                tr.parents('.ports').append(newRow);

                tr.removeClass('new-port').find('input[type=text]').unbind('textchange');
            }
        }

        // Collapse ports tables

        $('.ports-title-wrapper h4').click(function() {
            var $this = $(this);
            var $portsTitleWrapper = $this.parents('.ports-title-wrapper');

            $portsTitleWrapper.toggleClass('opened');
        });

        $('.ports').each(function() {
            $(this).find('tr:last-child input[type=text]').bind('textchange', onTextChange);
        });

        $('.ports .select input[type=hidden]').live('change', onTextChange);
        
        $('.ports .close-button').live('click', function () {
            $(this).parents('tr').remove();
        });

        
        $('form#new-request-form').bind('submit', function () {
            var serverIPs = ['10.11.', '192.168.', '200.200.200.'];

            var cancel = false;
            
            $('.ports.user-requests').each(function() {
                $(this).find('tr input[type=text]').removeClass('error');

                $(this).find('tr input[type=text]').each(function() {
                    var val = $(this).val();

                    var ipArr = val.split(',');

                    $.each(ipArr, function() {
                        var parts = this.split('-');
                        
                        $.each(parts, function() {
                            var ip = this;

                            $.each(serverIPs, function() {
                                if(ip.trim().indexOf(this) == 0) {
                                    cancel = true;
                                    return false;
                                }
                            });

                            if(cancel) {
                                return false;
                            }
                        });
                        
                        if(cancel) {
                            return false;
                        }
                    });
                    
                    if(cancel) {
                        $(this).addClass('error');
                        return false;
                    }
                });

                if(cancel) {
                    return false;
                }
            });
            
            return !cancel;
        });
    });
</script>

<form method="post" action="/request/new" data-confirm="true" id="new-request-form">
    @if (isUpdate)
    {
        <div class="actions-bar">
            <a class="button" href="/request/@Model.RequestId" tabindex="0">Cancel</a>
            <input type="submit" name="submit" value="Save" class="button submit-button" tabindex="0" />
        </div>
        <input type="hidden" name="oldRequestId" value="@Model.RequestId"/>
    }
    
<div class="request-form">

    @if (isCreate)
    {
        <h2>Creat a new IP request form</h2>
    }
    <div class="form-element">
        <label>
            <strong>Business Service</strong>
            @if (isView)
            {
                <div class="form-value">@Model.BusinessService</div>
            }
            else
            {
                <input name="BusinessService" type="text" tabindex="0" value="@Model.BusinessService"/>
            }
        </label>
    </div>
    <div class="form-element">
        <label>
            <strong>Application Name</strong>
            @if (isView)
            {
                <div class="form-value">@Model.ApplicationName</div>
            }
            else
            {
                <input name="ApplicationName" type="text" tabindex="0" value="@Model.ApplicationName"/>
            }
        </label>
    </div>
    <div class="form-element">
        <label>
            <strong>Application Type</strong></label>
        @if (isView)
        {
            foreach (var applicationType in Model.RequestApplicationTypes)
            {
            <span>@applicationType.Name</span>
            }
        }
        else
        {
            foreach (var applicationType in @Model.ApplicationTypes)
            {
            <label class="check-label">
                <input type="checkbox" name="ApplicationTypeId" value="@applicationType.Id" tabindex="0" @(Model.RequestApplicationTypes != null && Model.RequestApplicationTypes.Any(x => x.Id == applicationType.Id) ? "checked=checked" : "")/>
                <strong>@applicationType.Name</strong>
            </label>
            }
        }
    </div>
    <div class="form-element">
        <label>
            <strong>DNS Name</strong>
            @if (isView)
            {
                <div class="form-value">@Model.DNSName</div>
            }
            else
            {
                <input name="DNSName" type="text" tabindex="0" value="@Model.DNSName"/>
            }
        </label>
    </div>
    <div class="form-element">
        <label>
            <strong>Server Name</strong>
            @if (isView)
            {
                <div class="form-value">@Model.NetBIOSName</div>
            }
            else
            {
                <input name="NetBIOSName" type="text" tabindex="0" value="@Model.NetBIOSName"/>
            }
        </label>
    </div>
    <div class="hardware-properties">
        <h3 class="section-header">
            <span>Server Hardware Properties</span></h3>
        <div class="form-element">
            <label>
                <strong>Location</strong>
                @if (isView)
                {
                    <div class="form-value">@Model.ServerLocation.Name</div>
                }
                else
                {
                    <select name="LocationId">
                        <option value="0">Select...</option>
                        @foreach (var location in @Model.Locations)
                        {
                            <option value="@location.Id" @(Model.ServerLocation != null && location.Id == Model.ServerLocation.Id ? "selected=selected" : "")>@location.Name</option>
                        }
                    </select>
                }
            </label>
        </div>
        <div class="form-element">
            <label>
                <strong>Server Type</strong></label>
            @if (isView)
            {
                <div class="form-value">@Model.ServerType.Name</div>
            }
            else
            {
                <select name="ServerTypeId">
                    <option value="0">Select...</option>
                    @foreach (var servertype in @Model.ServerTypes)
                    {
                        <option  value="@servertype.Id" @(Model.ServerType != null && servertype.Id == Model.ServerType.Id ? "selected=selected" : "")>@servertype.Name</option>
                    }
                </select>
            }
        </div>
        <div class="bladeOptions" style="@(Model.ServerTypeName != IPRequestForm.ViewModels.ServerTypes.Blades ? "display: none;" : "")">
            <div class="form-element blade">
                <label class="blade-location">
                    <strong>Blade Switch Location</strong>
                    @if (isView)
                    {
                        <div class="form-value">@Model.RackChassisPort @(Model.NICTeaming ? "(Teaming)" : "")</div>
                    }
                    else
                    {
                        <input type="text" name="BladeSwitchLocation" tabindex="0"  value="@Model.RackChassisPort"/>
                    }
                </label>
                @if (!isView)
                {
                    <label class="check-label">
                        <input type="checkbox" name="BladeTeaming" value="True" tabindex="0" @(Model.NICTeaming ? "checked=checked" : "") />
                        <input type="hidden" name="BladeTeaming" value="False"/>
                        <strong>Teaming</strong>
                    </label>
                }
            </div>
        </div>
        <div class="form-element">
            <label>
                <strong>Operating System</strong>
                @if (isView)
                {
                    <div class="form-value">@Model.OperatingSystem.Name</div>
                }
                else
                {
                    <select name="OperatingSystemId">
                        <option value="0">Select...</option>
                        @foreach (var operSys in Model.OperatingSystems)
                        {
                            <option value="@operSys.Id" @(Model.OperatingSystem != null && operSys.Id == Model.OperatingSystem.Id ? "selected=selected" : "")>@operSys.Name (@operSys.Architecture)</option>
                        }
                    </select>
                }
            </label>
        </div>
    </div>
    @if (isView && !string.IsNullOrWhiteSpace(Model.Notes))
    {
    <div class="form-element notes">
        <em>@Model.Notes</em>
    </div>
    }
    @if (Model.ShowPolicies)
    {
        <div class="request-policy">
            @if (!isView)
            {
                <span class="help-button">Help ?</span>
            }
            
    @{
            var vmUserToRequestedServer = new ViewDataDictionary
            { 
                {"isView", isView},
                {"isCreate", isCreate},
                {"portTypes", Model.PortTypes},
                {"classes", "user-requests"},
                {"portDirectionId", (int)IPRequestForm.ViewModels.PortDirections.UserToRequestedServer }
            };
            
            var vmRequestedServerToUser = new ViewDataDictionary
            { 
                {"isView", isView},
                {"isCreate", isCreate},
                {"portTypes", Model.PortTypes},
                {"classes", "user-requests"},
                {"portDirectionId", (int)IPRequestForm.ViewModels.PortDirections.RequestedServerToUser }
            };
            
            var vmServerToRequestedServer = new ViewDataDictionary
            { 
                {"isView", isView},
                {"isCreate", isCreate},
                {"portTypes", Model.PortTypes},
                {"classes", ""},
                {"portDirectionId", (int)IPRequestForm.ViewModels.PortDirections.ServerToRequestedServer }
            };
            
            var vmRequestedServerToServer = new ViewDataDictionary
            { 
                {"isView", isView},
                {"isCreate", isCreate},
                {"portTypes", Model.PortTypes},
                {"classes", ""},
                {"portDirectionId", (int)IPRequestForm.ViewModels.PortDirections.RequestedServerToServer }
            };
            }
            <h3>
                Server Policy</h3>
            <div class="ports-title-wrapper">
                <h4>
                    User to Requested Server</h4>
                @Html.Partial("PolicyTable", Model.Policies != null ? Model.Policies.Where(x => x.PortDirection == IPRequestForm.ViewModels.PortDirections.UserToRequestedServer) : null, vmUserToRequestedServer)
            </div>
            <div class="ports-title-wrapper">
                <h4>
                    Requested Server to User</h4>
                @Html.Partial("PolicyTable", Model.Policies != null ? Model.Policies.Where(x => x.PortDirection == IPRequestForm.ViewModels.PortDirections.RequestedServerToUser) : null, vmRequestedServerToUser)
            </div>
            <div class="ports-title-wrapper">
                <h4>
                    Other Server to Requested Server</h4>
                @Html.Partial("PolicyTable", Model.Policies != null ? Model.Policies.Where(x => x.PortDirection == IPRequestForm.ViewModels.PortDirections.ServerToRequestedServer) : null, vmServerToRequestedServer)
            </div>
            <div class="ports-title-wrapper">
                <h4>
                    Requested Server to Other Server</h4>
                @Html.Partial("PolicyTable", Model.Policies != null ? Model.Policies.Where(x => x.PortDirection == IPRequestForm.ViewModels.PortDirections.RequestedServerToServer) : null, vmRequestedServerToServer)
            </div>
        </div>
    }
    @if (!isView)
    {
        <div class="form-element notes">
            <label>
                <strong>Notes</strong>
                <textarea name="notes" rows="3" tabindex="0">@Model.Notes</textarea>
            </label>
        </div>
        <input type="submit" name="submit" value="Save" class="button submit-button" tabindex="0" />
        <a href="@(isCreate ? "/" : "/request/" + Model.RequestId)" class="button" tabindex="0">Cancel</a>
    }
</div>
</form>